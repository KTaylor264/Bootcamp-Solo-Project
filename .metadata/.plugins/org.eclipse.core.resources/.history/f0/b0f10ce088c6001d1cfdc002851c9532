package com.kendelltaylor.hmcalc.controllers;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.kendelltaylor.hmcalc.models.Attribute;
import com.kendelltaylor.hmcalc.models.Digimon;
import com.kendelltaylor.hmcalc.models.GrowthType;
import com.kendelltaylor.hmcalc.models.Item;
import com.kendelltaylor.hmcalc.models.Stage;
import com.kendelltaylor.hmcalc.models.SupportSkill;
import com.kendelltaylor.hmcalc.models.Type;
import com.kendelltaylor.hmcalc.services.AttributeService;
import com.kendelltaylor.hmcalc.services.DigimonService;
import com.kendelltaylor.hmcalc.services.GrowthTypeService;
import com.kendelltaylor.hmcalc.services.ItemService;
import com.kendelltaylor.hmcalc.services.StageService;
import com.kendelltaylor.hmcalc.services.SupportSkillService;
import com.kendelltaylor.hmcalc.services.TypeService;

@Controller
public class MainController {
	private final DigimonService digiServ;
	private final GrowthTypeService growthServ;
	private final StageService stageServ;
	private final TypeService typeServ;
	private final AttributeService attribServ;
	private final SupportSkillService suppServ;
	private final ItemService itemServ;
	
	public MainController(DigimonService digiServ, GrowthTypeService growthServ, StageService stageServ,
			TypeService typeServ, AttributeService attribServ, SupportSkillService suppServ,
			ItemService itemServ) {
		this.digiServ = digiServ;
		this.growthServ = growthServ;
		this.stageServ = stageServ;
		this.typeServ = typeServ;
		this.attribServ = attribServ;
		this.suppServ = suppServ;
		this.itemServ = itemServ;
	}
	
	@GetMapping("/")
	public String index(Model model)
	{
		List<Digimon> digimons = digiServ.findAll();
		List<GrowthType> growthTypes = growthServ.findAll();
		List<Stage> stages = stageServ.findAll();
		List<Type> types = typeServ.findAll();
		List<Attribute> attributes = attribServ.findAll();
		List<SupportSkill> supports = suppServ.findAll();
		List<Item> items = itemServ.findAll();
		
		model.addAttribute("digimons", digimons);
		model.addAttribute("growthTypes", growthTypes);
		model.addAttribute("stages", stages);
		model.addAttribute("types", types);
		model.addAttribute("attributes", attributes);
		model.addAttribute("supports", supports);
		model.addAttribute("items", items);
		
		return "index.jsp";
	}
	
	@PostMapping("/")
	public String updateSearch(Model model, @RequestParam(value="Baby") Boolean baby, @RequestParam(value="In-Training") Boolean train, @RequestParam(value="Rookie") Boolean rookie,
			@RequestParam(value="Champion") Boolean champ, @RequestParam(value="Ultimate") Boolean ult, @RequestParam(value="Mega") Boolean mega, @RequestParam(value="Ultra") Boolean ultra,
			@RequestParam(value="Armor") Boolean armor, @RequestParam(value="None") Boolean none)
	{
		List<Digimon> digimons = digiServ.findAll();
		List<GrowthType> growthTypes = growthServ.findAll();
		List<Stage> stages = stageServ.findAll();
		List<Type> types = typeServ.findAll();
		List<Attribute> attributes = attribServ.findAll();
		List<SupportSkill> supports = suppServ.findAll();
		List<Item> items = itemServ.findAll();
		
		if (!baby && !train && !rookie && !champ && !ult && !mega && !ultra && !armor && !none) {
			System.out.print("pass the whole digimon list");
		} else {
			if (!baby) {
				for (int i = digimons.size() - 1; i > -1 ; i--) {
					// baby stage
					if (digimons.get(i).getStage() == stages.get(0)) {
						digimons.remove(i);
					}
				}
			}
			
			if (!train) {
				for (int i = digimons.size() - 1; i > -1 ; i--) {
					// baby stage
					if (digimons.get(i).getStage() == stages.get(1)) {
						digimons.remove(i);
					}
				}
			}
			
			if (!rookie) {
				for (int i = digimons.size() - 1; i > -1 ; i--) {
					// baby stage
					if (digimons.get(i).getStage() == stages.get(2)) {
						digimons.remove(i);
					}
				}
			}
			
			if (!champ) {
				for (int i = digimons.size() - 1; i > -1 ; i--) {
					// baby stage
					if (digimons.get(i).getStage() == stages.get(3)) {
						digimons.remove(i);
					}
				}
			}
			
			if (!ult) {
				for (int i = digimons.size() - 1; i > -1 ; i--) {
					// baby stage
					if (digimons.get(i).getStage() == stages.get(4)) {
						digimons.remove(i);
					}
				}
			}
			
			if (!mega) {
				for (int i = digimons.size() - 1; i > -1 ; i--) {
					// baby stage
					if (digimons.get(i).getStage() == stages.get(5)) {
						digimons.remove(i);
					}
				}
			}
			
			if (!ultra) {
				for (int i = digimons.size() - 1; i > -1 ; i--) {
					// baby stage
					if (digimons.get(i).getStage() == stages.get(6)) {
						digimons.remove(i);
					}
				}
			}
			
			if (!armor) {
				for (int i = digimons.size() - 1; i > -1 ; i--) {
					// baby stage
					if (digimons.get(i).getStage() == stages.get(7)) {
						digimons.remove(i);
					}
				}
			}
			
			if (!none) {
				for (int i = digimons.size() - 1; i > -1 ; i--) {
					// baby stage
					if (digimons.get(i).getStage() == stages.get(8)) {
						digimons.remove(i);
					}
				}
			}
		}
		
		model.addAttribute("digimons", digimons);
		model.addAttribute("growthTypes", growthTypes);
		model.addAttribute("stages", stages);
		model.addAttribute("types", types);
		model.addAttribute("attributes", attributes);
		model.addAttribute("supports", supports);
		model.addAttribute("items", items);
		
		return "index.jsp";
	}
}
